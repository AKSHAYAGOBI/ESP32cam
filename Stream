import cv2
import numpy as np

# Load YOLOv5 model (pretrained)
net = cv2.dnn.readNet("yolov5s.onnx")  # Make sure to download and set up a YOLOv5 model in ONNX format

# Define the ESP32-CAM stream URL
stream_url = "http://192.168.x.x:81/stream"  # Replace with the actual IP address

# Open a connection to the stream
cap = cv2.VideoCapture(stream_url)

# Set up the classes YOLO can detect
classes = open('coco.names').read().strip().split('\n')

while True:
    ret, frame = cap.read()  # Read the frame from the stream
    if not ret:
        print("Failed to grab frame")
        break

    # Prepare the frame for object detection
    blob = cv2.dnn.blobFromImage(frame, 1 / 255.0, (640, 640), swapRB=True, crop=False)
    net.setInput(blob)

    # Perform object detection
    outputs = net.forward()

    # Process the results
    for output in outputs:
        for detection in output:
            confidence = detection[4]
            if confidence > 0.5:  # Confidence threshold
                class_id = np.argmax(detection[5:])
                label = classes[class_id]
                print(f"Detected: {label}")

                # Draw bounding box (for visualization)
                box = detection[:4] * np.array([frame.shape[1], frame.shape[0], frame.shape[1], frame.shape[0]])
                (centerX, centerY, width, height) = box.astype("int")
                x = int(centerX - (width / 2))
                y = int(centerY - (height / 2))

                # Draw rectangle and label on the frame
                cv2.rectangle(frame, (x, y), (x + int(width), y + int(height)), (0, 255, 0), 2)
                cv2.putText(frame, label, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Show the frame with detections
    cv2.imshow("Object Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
